#include <SFML/Graphics.hpp>
#include <SFML/OpenGL.hpp>
#include "Widget.h"
#include <iostream>




namespace gui
{
    class TextBox :public Widget
    {

    private:

        sf::Vector2f _position;
        std::string str;
        size_t strSize;
        sf::Text _text;
        sf::Font _font;
        sf::RectangleShape _cursor;
        sf::RectangleShape _buttonBox;
        size_t _cursorPos;
        float offset;
        int _status;
        sf::Clock clock;
        enum Status
        {
            None=0,
            Activ
        };

    public:

        TextBox(sf::Vector2f position = sf::Vector2f(0,0),
               unsigned int x=200,unsigned int y=200, Widget* parent=nullptr): _cursorPos(0), Widget(parent)
        {
            _position=position;
            _font.loadFromFile("18028.ttf");
            _text.setString("");
            _text.setFont(_font);
            _text.setColor(sf::Color::Black);
            _status=Status::None;
            _buttonBox.setFillColor(sf::Color::White);
            _buttonBox.setSize(sf::Vector2f(x,y));
            _buttonBox.setOutlineColor(sf::Color::Black);
            _buttonBox.setOutlineThickness(2);
            _position.x+=_buttonBox.getOutlineThickness();
            _position.y+=_buttonBox.getOutlineThickness();
            offset = 6;
            strSize = 1000;
            updateShape();
        }

        void updateShape() // Задание формы и расположения всех элементов кнопки
        {
            _text.setCharacterSize(14);
            _text.setPosition(offset,offset);
            _cursor.setSize(sf::Vector2f(2,_text.getCharacterSize()*1.3));
            _cursor.setPosition(sf::Vector2f(offset,offset));
            _cursor.setFillColor(sf::Color(100,0,200));
        }

        virtual void draw(sf::RenderTarget& target, sf::RenderStates states)const override // Отрисовка кнопки
        {
            states.transform.translate(_position);
            target.draw(_buttonBox,states);
            glEnable(GL_SCISSOR_TEST);
            glScissor(_position.x+offset,target.getSize().y-_position.y-_buttonBox.getSize().y+offset,_buttonBox.getSize().x-offset*2,_buttonBox.getSize().y-offset*2);
            target.draw(_text,states);
            glDisable(GL_SCISSOR_TEST);
            if(_status)
            target.draw(_cursor,states);
        }

         void processEvent(sf::Event& event) // Обработчик событий
        {
            switch(event.type)
            {
            case sf::Event::TextEntered:
                if(_status)
                {

                   // if(_cursorPos==str.size())
                   // {
                     //   setText(event.text.unicode);
                   // }
                   // else if(_cursorPos<str.size())
                   // {
                        enterText(event.text.unicode);
                   // }
                }
                break;
            case sf::Event::KeyPressed:
                if(_status)
                {onPressKey(event.key);}
                break;
            case sf::Event::MouseButtonReleased:
                if(!_status)
                onMousePressed(event.mouseButton.x,event.mouseButton.y);
                //else
                //select= false;
                break;
            case sf::Event::MouseButtonPressed:
                if(_status)
                mouseCursorPos(event.mouseButton.x,event.mouseButton.y);
                break;
            /*case sf::Event::MouseMoved:

                if(select)
                {
                    mouseSelection(event.mouseMove.x,event.mouseMove.y);
                }

                break;*/
            }
        }

        void mouseCursorPos(float x, float y) // устанивливает курсор по нажатию кнопки мыши
        {
            //select= false;
            for(int i = str.size(); i>=0;--i)
            {
                if(y>=_cursor.getPosition().y && y<=_cursor.getPosition().y+_cursor.getSize().y)
                {
                    if(x>=_text.findCharacterPos(i).x)
                    {
                        setCursor(i);
                        i=0;
                        //select=true;
                    }
                }
            }
            //if(_selectionText.getString()!="")
            //{
              //  selectionDrop();
            //}
        }
         void onPressKey(const sf::Event::KeyEvent& key) // обработчик нажатия функциональных клавиш и комбинаций клавиш
        {
            switch(key.code)
            {
            case sf::Keyboard::BackSpace:
                if(_cursorPos>0)
                {
                    //if(_selectionText.getString()!="")
                    //{
                      //  selectionDelete();
                    //}
                    //else
                    //{
                    str.erase(_cursorPos-1,1);
                    _text.setString(str);
                    setCursor(_cursorPos-1);
                    //}
                }
                break;
            case sf::Keyboard::Enter:
                //selectionDrop();
                std::cout<<str<<" :"<<str.size()<<"\n";
                str.insert(_cursorPos,1,'\n');
                _text.setString(str);
                setCursor(_cursorPos+1);


                std::cout<<str<<" :"<<str.size()<<"\n";
                break;
            case sf::Keyboard::Delete:
                if(_cursorPos!=0 &&_cursorPos!=str.size())
                {
                    /*if(_selectionText.getString()!="")
                    {
                        selectionDelete();
                    }
                    else
                    {*/
                    str.erase(_cursorPos,1);
                    _text.setString(str);
                    //}
                }
                break;
            case sf::Keyboard::Left:
                    /*if(key.shift)
                    {
                        if(_selectionPos>0)
                        {
                        --_selectionPos;
                        setSelection();
                        }
                    }
                    else
                    {
                        if(_selectionText.getString()!="")
                        {
                            if(_cursorPos>_selectionPos)
                            {
                                setCursor(_selectionPos+1);

                            }
                            else
                            {
                                setCursor(_cursorPos+1);
                            }
                            _selectionText.setString("");
                            _selection.setSize(sf::Vector2f(0,0));
                        }*/
                        if(_cursorPos>0)
                        setCursor(_cursorPos-1);
                    //}
                break;
            case sf::Keyboard::Right:
                    /*if(key.shift)
                    {
                        if(_selectionPos < str.size())
                        {
                        ++_selectionPos;
                        setSelection();
                        }
                    }
                    else
                    {
                       if(_selectionText.getString()!="")
                        {
                            if(_cursorPos<_selectionPos)
                            {
                                setCursor(_selectionPos-1);

                            }
                            else
                            {
                                setCursor(_cursorPos-1);
                            }
                            _selectionText.setString("");
                            _selection.setSize(sf::Vector2f(0,0));
                        }*/
                        if(_cursorPos<str.size())
                        setCursor(_cursorPos+1);
                    //}
                break;
            case sf::Keyboard::Up:
               //std::cout<<_cursorPos<<" ;";
               setCursorUp();
               //std::cout<<_cursorPos<<"\n";
            break;
            case sf::Keyboard::Down:
            setCursorDown();
            break;
            case sf::Keyboard::Home:
                //selectionDrop();
                setCursor(0);
                break;
            case sf::Keyboard::End:
                //selectionDrop();
                setCursor(str.size());
                break;
            case sf::Keyboard::Escape:
                //selectionDrop();
                _status=Status::None;
                break;
           /* case sf::Keyboard::C:
                if(key.control)
                {
                    if(_selectionText.getString()!="")
                    {
                     const std::string string = _selectionText.getString();
                     sf::Clipboard::setString(string);

                    }
                }
                break;
            case sf::Keyboard::V:
                if(key.control)
                {
                   std::string string = sf::Clipboard::getString();
                   if(str.size()+string.size()<=strSize)
                    str.insert(_cursorPos,string);
                    _text.setString(str);
                    setCursor(_cursorPos+string.size());
                }
                break;
            case sf::Keyboard::X:
                if(key.control)
                {
                    const std::string string = _selectionText.getString();
                    sf::Clipboard::setString(string);
                    selectionDelete();
                }
                break;*/
            }
            //std::cout<<strOrder.size()<<"V"<<"\n";
            //std::cout<<_cursorPosY<<"CP"<<"\n";
        }

        void enterText(sf::Uint32 unicode) // Ввод текста с позиции курсора
        {

            if(unicode>30 && (unicode<127||unicode>159))
            {
                /*if(_selectionText.getString()!="")
                    {
                        selectionDelete();
                    }*/
                if(str.size()<strSize)
                {

                    str.insert(_cursorPos,1,unicode);
                    _text.setString(str);
                    setCursor(_cursorPos+1);
                }
            }
        }

        void setCursor(size_t index) // Установить позицию курсора
        {
            if(index<=strSize)
            {
                _cursorPos=index;
               // _selectionPos=index;
                _cursor.setPosition(_text.findCharacterPos(index).x,_text.findCharacterPos(index).y);
            }
            if(_cursor.getPosition().x < offset)
            {
                float diff = offset - _cursor.getPosition().x;
                _text.move(diff,0);
                _cursor.move(diff,0);

            }
            else if(_cursor.getPosition().x > _buttonBox.getSize().x-offset)
            {
                float diff = _cursor.getPosition().x - _buttonBox.getSize().x+offset;
                _text.move(-diff,0);
                _cursor.move(-diff,0);
            }

            if(_cursor.getPosition().y < offset)
            {
                float diff = offset - _cursor.getPosition().y;
                _text.move(0,diff);
                _cursor.move(0,diff);
            }
            else if(_cursor.getPosition().y + _cursor.getSize().y > _buttonBox.getSize().y-offset)
            {
                float diff = _cursor.getPosition().y + _cursor.getSize().y - (_buttonBox.getSize().y-offset);
                _text.move(0,-diff);
                _cursor.move(0,-diff);
            }

            float textWidth =_text.getLocalBounds().width;
            if(_text.getPosition().x<offset && _text.getPosition().x+textWidth<_buttonBox.getSize().x-offset*2-2)
            {
                float diff=(_buttonBox.getSize().x-offset*2-2)-(_text.getPosition().x+textWidth);
                _text.move(diff,0);
                _cursor.move(diff,0);

                if(textWidth<_buttonBox.getSize().x-offset*2-2)
                {
                    diff=offset-_text.getPosition().x;
                    _text.move(diff,0);
                    _cursor.move(diff,0);
                }
            }

            float textHeight = _text.getLocalBounds().height;
            if(_text.getPosition().y<offset && _text.getPosition().y+textHeight <_buttonBox.getSize().y-offset*2-2)
            {
                float diff=(_buttonBox.getSize().y-offset*2-2)-(_text.getPosition().y+textHeight);
                _text.move(0,diff);
                _cursor.move(0,diff);

                if(textHeight<_buttonBox.getSize().y-offset*2-2)
                {
                    diff=offset-_text.getPosition().y;
                    _text.move(0,diff);
                    _cursor.move(0,diff);
                }
            }

        }

       void setCursorUp()
        {
            int n=0;
            size_t enstr1=0;
            size_t enstr2=0;
            for(size_t i=_cursorPos-1;i>0;--i)
            {
                if(str[i]=='\n')
                {
                    ++n;
                    if(n==1)
                    {
                        enstr1=i;
                    }
                    else if(n==2)
                    {
                        enstr2=i+1;
                        break;
                    }
                }
            }

            if(n!=0)
            {
                size_t pos=_cursorPos-enstr1;
                pos+=enstr2-1;



                if(pos>enstr1)
                {
                    pos=enstr1;
                    setCursor(pos);
                }
                else
                {
                    setCursor(pos);
                }

                std::cout<<enstr1<<" : "<<enstr2<<" : " <<pos<<"\n";
            }



        }

        void setCursorDown()
        {
            size_t enstr1=str.size();
            size_t enstr2=str.size();
            size_t enstr3=0;
            for(size_t i=_cursorPos;i<str.size();++i)
            {
                if(str[i]=='\n')
                {
                    if(enstr1==str.size())
                    {
                        enstr1=i;
                    }
                    else if(enstr2==str.size())
                    {
                        enstr2=i;
                        break;
                    }
                }
            }
            if(_cursorPos!=0)
            {
            for(int i=_cursorPos-1;i>0;--i)
            {
                if(str[i]=='\n')
                {
                    if(enstr3==0)
                    {
                        enstr3=i;
                        break;
                    }
                }
            }
            }
            else
            {
                enstr3=1;
            }

                size_t pos=_cursorPos-enstr3;
                pos+=enstr1;

                if(pos>enstr2)
                {
                    pos=enstr2;
                    setCursor(pos);
                }
                else
                {
                    setCursor(pos);
                }
                std::cout<<enstr1<<" : "<<enstr2<<" : " <<enstr3<<" : " <<pos<<"\n";
        }

        void onMousePressed(float x, float y) // Обработчик нажатия кнопки мыши
        {
            sf::FloatRect rect ;
            rect.left = _position.x;
            rect.top = _position.y;
            rect.width = _buttonBox.getSize().x+_buttonBox.getOutlineThickness();
            rect.height= _buttonBox.getSize().y+_buttonBox.getOutlineThickness();
            const sf::Vector2f mouse_pos(x,y);
            if(rect.contains(mouse_pos))
            {
                _status = Status::Activ;
            }
        }

        void setCursorBlink() // Создает эффект мигания курсора
        {
            if(_status)
            {
                //if(_selectionText.getString()!="")
                //{
                  //  _cursor.setFillColor(sf::Color(255,255,255,0));
                //}
                //else
                //{
                float elapsedTime=clock.getElapsedTime().asSeconds();
                if(elapsedTime>0.5)
                {
                    if(_cursor.getFillColor()==sf::Color(255,255,255,0))
                    {
                        _cursor.setFillColor(sf::Color(0,0,200,150));
                    }
                    else
                    {
                        _cursor.setFillColor(sf::Color(255,255,255,0));

                    }
                    clock.restart();
                }
                //}
            }
            else
            {
                _cursor.setFillColor(sf::Color(255,255,255,0));
            }

        }
    };
}
